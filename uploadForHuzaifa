
from flask import Flask, request, jsonify, render_template, send_from_directory
import requests
import time
import os
from werkzeug.utils import secure_filename

app = Flask(__name__)

API_KEY = "bN327lVKvW0qlqbQqCD7FH2n7erra872HXUKvAVk"
BASE_URL = "https://api.printful.com"
HEADERS = {"Authorization": f"Bearer {API_KEY}"}

# Upload folder configuration
UPLOAD_FOLDER = "uploaded_files"
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# --- Get store_id dynamically ---
def get_store_id():  
    resp = requests.get(f"{BASE_URL}/stores", headers=HEADERS)
    data = resp.json()
    stores = data.get("result", [])
    if not stores:
        raise Exception("No stores found for this API key.")
    return stores[0]["id"]

# Serve uploaded files publicly
@app.route('/uploads/<filename>')
def uploaded_file(filename):
    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)

# Function to save a file and return a public URL
def save_file_and_get_url(file):
    filename = secure_filename(file.filename)
    filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
    file.save(filepath)
    # Generate a public URL
    file_url = f"{request.host_url}uploads/{filename}"
    return file_url

# Home page
@app.route("/")
def index():
    return render_template("index.html")

# Fetch catalog products
@app.route("/products", methods=["GET"])
def get_products():
    resp = requests.get(f"{BASE_URL}/products", headers=HEADERS)
    return jsonify(resp.json())

# Fetch single product variants
@app.route("/product/<int:product_id>", methods=["GET"])
def get_product_variants(product_id):
    resp = requests.get(f"{BASE_URL}/products/{product_id}", headers=HEADERS)
    return jsonify(resp.json())

# Fetch available placements for a product
@app.route("/product/<int:product_id>/placements", methods=["GET"])
def get_product_placements(product_id):
    try:
        resp = requests.get(
    f"{BASE_URL}/mockup-generator/printfiles/{product_id}",
    headers=HEADERS,
    params={"store_id": get_store_id()}
)

        
        if resp.status_code != 200:
            return jsonify({"error": "Failed to fetch placements", "details": resp.json()}), resp.status_code
        
        return jsonify(resp.json())
    except Exception as e:
        print(f"Placements error: {str(e)}")
        return jsonify({"error": f"Failed to fetch placements: {str(e)}"}), 500

# Upload endpoint - now just saves locally and returns URL
import boto3
from botocore.exceptions import ClientError
from werkzeug.utils import secure_filename

# AWS S3 configuration

S3_BUCKET_NAME = "techtylistsimagestorage"
S3_FOLDER = "test/"  # folder path inside the bucket

# Initialize S3 client
s3_client = boto3.client(
    "s3",
    region_name=AWS_REGION,
    aws_access_key_id=AWS_ACCESS_KEY_ID,
    aws_secret_access_key=AWS_SECRET_ACCESS_KEY
)

def upload_file_to_s3(file, folder=S3_FOLDER):
    """Upload file to S3 and return public URL."""
    filename = secure_filename(file.filename)
    object_name = f"{folder}{filename}"
    
    try:
        s3_client.upload_fileobj(
            file,
            S3_BUCKET_NAME,
            object_name,
            ExtraArgs={"ContentType": file.mimetype}  # remove ACL
        )
        url = f"https://{S3_BUCKET_NAME}.s3.{AWS_REGION}.amazonaws.com/{object_name}"
        return url
    except ClientError as e:
        print(f"S3 upload error: {e}")
        return None


# Updated upload endpoint
@app.route("/upload", methods=["POST"])
def upload_file():
    try:
        if "file" not in request.files:
            return jsonify({"code": 400, "error": {"message": "No file provided"}}), 400
        
        file = request.files["file"]
        
        if file.filename == "":
            return jsonify({"code": 400, "error": {"message": "No file selected"}}), 400

        filename = secure_filename(file.filename)
        size = len(file.read())  # get size first
        file.seek(0)  # reset pointer to start for S3 upload

        file_url = upload_file_to_s3(file)

        if not file_url:
            return jsonify({"code": 500, "error": {"message": "Failed to upload to S3"}}), 500
        
        return jsonify({
            "code": 200,
            "result": {
                "url": file_url,
                "filename": filename,
                "size": size,
                "type": file.mimetype
            }
        })

    except Exception as e:
        print(f"Upload error: {str(e)}")
        return jsonify({"code": 500, "error": {"message": f"Upload failed: {str(e)}"}}), 500




# Create mockup with proper position parameters
@app.route("/mockup", methods=["POST"])
def create_mockup():
    try:
        data = request.json
        product_id = data.get("product_id")
        variant_ids = data.get("variant_ids", [])
        image_url = data.get("image_url")
        placements = data.get("placement", "front")  # can be string or list
        position = data.get("position", {
            "area_width": 1800,
            "area_height": 2400,
            "width": 1800,
            "height": 1800,
            "top": 300,
            "left": 0
        })

        if not product_id or not image_url:
            return jsonify({"error": "Missing product_id or image_url"}), 400

        # Ensure placements is a list
        if isinstance(placements, str):
            placements = [placements]

        # Build files array for all selected placements
        files_payload = [
            {"placement": p, "image_url": image_url, "position": position} for p in placements
        ]

        payload = {
            "variant_ids": variant_ids,
            "format": "jpg",
            "files": files_payload
        }

        print(f"Creating mockup with payload: {payload}")

        resp = requests.post(
            f"{BASE_URL}/mockup-generator/create-task/{product_id}",
            headers={**HEADERS, "Content-Type": "application/json"},
            params={"store_id": get_store_id()},
            json=payload
        )

        task_data = resp.json()
        if resp.status_code != 200:
            return jsonify(task_data), resp.status_code

        task_key = task_data.get("result", {}).get("task_key")
        if not task_key:
            return jsonify({"error": "No task key returned", "response": task_data}), 400

        # Poll for completion
        timeout = 60
        interval = 3
        start = time.time()
        mockups = []

        while time.time() - start < timeout:
            task_resp = requests.get(
                f"{BASE_URL}/mockup-generator/task?task_key={task_key}",
                headers=HEADERS
            )

            if task_resp.status_code != 200:
                print(f"Task polling error: {task_resp.status_code} - {task_resp.text}")
                break

            task_result = task_resp.json()
            status = task_result.get("result", {}).get("status")

            if status == "completed":
                mockups = task_result["result"].get("mockups", [])
                break
            elif status == "failed":
                error_msg = task_result.get("result", {}).get("error", "Mockup generation failed")
                return jsonify({"error": error_msg}), 400
            else:  # pending or in_progress
                time.sleep(interval)

        return jsonify({
            "task_key": task_key,
            "mockups": mockups,
            "status": status if 'status' in locals() else "timeout"
        })

    except Exception as e:
        print(f"Mockup error: {str(e)}")
        return jsonify({"error": f"Mockup creation failed: {str(e)}"}), 500
@app.route("/mockup/task/<task_key>", methods=["GET"])
def poll_mockup_task(task_key):
    try:
        resp = requests.get(
            f"{BASE_URL}/mockup-generator/task?task_key={task_key}",
            headers=HEADERS,
             params={"store_id": get_store_id()}
        )
        if resp.status_code != 200:
            return jsonify({"error": "Failed to poll mockup task", "details": resp.json()}), resp.status_code
        data = resp.json()
        result = data.get("result", {})
        status = result.get("status", "unknown")
        mockups = result.get("mockups", [])
        return jsonify({
            "task_key": task_key,
            "mockups": mockups,
            "status": status
        })
    except Exception as e:
        print(f"Mockup poll error: {str(e)}")
        return jsonify({"error": f"Failed to poll mockup task: {str(e)}"}), 500

# Debug endpoint
@app.route("/test-api", methods=["GET"])
def test_api():
    try:
        resp = requests.get(f"{BASE_URL}/stores", headers=HEADERS)
        return jsonify({
            "status_code": resp.status_code,
            "response": resp.json()
        })
    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(debug=True, port=5000)
